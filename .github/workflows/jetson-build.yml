name: Build Jetson Orin Nano Disk Image

on:
  release:
    types: [published]
  push:
    # branches: [ main, master, selfhosted, Build-RootFS-from-Ubuntu-Base ]
    tags: [ 'v*' ]
  # pull_request:
  #   branches: [ main, master ]
  workflow_dispatch:
    inputs:
      l4t_major_version:
        description: 'L4T Version (default: 36)'
        required: false
        default: '36'
      l4t_minor_version:
        description: 'L4T Version (default: 4.4)'
        required: false
        default: '4.4'
      image_type:
        description: 'Output image drive type (SD/USB/NVME)'
        required: false
        default: 'NVME'
      jetson_type:
        description: 'Jetson board type'
        required: false
        default: 'jetson-orin-nano-devkit-super'

# permissions:
#   contents: read

env:
  L4T_MAJOR_VERSION: "${{ github.event.env.L4T_MAJOR_VERSION || '36' }}"
  L4T_MINOR_VERSION: "${{ github.event.env.L4T_MINOR_VERSION || '4.4' }}"
  IMAGE_TYPE: "${{ github.event.inputs.image_type || 'NVME' }}"
  JETSON_TYPE: "${{ github.event.inputs.jetson_type || 'jetson-orin-nano-devkit-super' }}"
  OEM_USER: "nexus"

jobs:
  cache-jetson-downloads:
    # runs-on: self-hosted
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache L4T BSP and Sample Root FS
      id: cache-bsp
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/Linux_for_Tegra.tar.zst
        key: bsp-${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}-BSP
        lookup-only: true

    - name: Download and extract L4T Driver Package & Sample Root filesystem
      if: steps.cache-bsp.outputs.cache-hit != 'true'
      run: |
        echo "Downloading L4T Driver Package (BSP)..."
        wget -q -O Jetson_Linux_aarch64.tbz2 https://developer.nvidia.com/downloads/embedded/l4t/r${{ env.L4T_MAJOR_VERSION }}_release_v${{ env.L4T_MINOR_VERSION }}/release/Jetson_Linux_r${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}_aarch64.tbz2
        echo "Extracting L4T Driver Package (BSP)..."
        tar -xjf Jetson_Linux_aarch64.tbz2 -C $GITHUB_WORKSPACE/
        echo "Compress L4T..."
        sudo tar --create --preserve-permissions --use-compress-program=zstd -f $GITHUB_WORKSPACE/Linux_for_Tegra.tar.zst -C $GITHUB_WORKSPACE Linux_for_Tegra

  create-draft:
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create draft
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-jetson-image:
    # runs-on: self-hosted
    runs-on: ubuntu-22.04
    needs: [cache-jetson-downloads, create-draft]

    steps:
    - name: Disable man-db to make package install and removal faster
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
        sudo dpkg-reconfigure man-db

    - name: Free Disk Space
      # uses: jlumbroso/free-disk-space@main
      uses: jayllyz/free-disk-space@perf/use-rmz
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies on host
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          lbzip2 \
          libncurses5-dev \
          libncursesw5-dev \
          libxml2-utils \
          qemu-user-static \
          xmlstarlet

    - name: Set up QEMU for ARM64 emulation
      run: |
        sudo update-binfmts --enable qemu-aarch64
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Restore Cached L4T BSP
      id: cache-bsp
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/Linux_for_Tegra.tar.zst
        key: bsp-${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}-extracted
        fail-on-cache-miss: true

    - name: Extract L4T packages
      run: |
        cd $GITHUB_WORKSPACE

        echo "Extracting L4T Driver Package..."
        sudo tar --extract --same-permissions --use-compress-program=zstd -f ${{ github.workspace }}/Linux_for_Tegra.tar.zst
        echo "Remove cache file..."
        rm ${{ github.workspace }}/Linux_for_Tegra.tar.zst
        sudo rm -rf ${{ github.workspace }}/Linux_for_Tegra/rootfs/*

    - name: Patch files
      run: |
        #Update base image
        sed -i 's|https://cdimage.ubuntu.com/ubuntu-base/releases/22.04/release/ubuntu-base-22.04.2-base-arm64.tar.gz|https://cdimage.ubuntu.com/ubuntu-base/releases/22.04/release/ubuntu-base-22.04.5-base-arm64.tar.gz|g' ${{ github.workspace }}/Linux_for_Tegra/tools/samplefs/nvubuntu-jammy-aarch64-samplefs
        # Move rootFS Folder instead of creating tarball
        sed -i 's|sudo tar --numeric-owner -jcpf "${output_samplefs}" \*|sudo mv ./* '"${{ github.workspace }}"'/Linux_for_Tegra/tools/samplefs|' ./Linux_for_Tegra/tools/samplefs/nv_build_samplefs.sh

    - name: Copy files
      run: |
        #Copy package list for RootFS
        cp samplefs/nvubuntu-jammy-nano-aarch64-packages ${{ github.workspace }}/Linux_for_Tegra/tools/samplefs/nvubuntu-jammy-nano-aarch64-packages

    - name: Create Ubuntu RootFS
      run: |
        sudo ${{ github.workspace }}/Linux_for_Tegra/tools/samplefs/nv_build_samplefs.sh --abi aarch64 --distro ubuntu --flavor nano --version jammy

    # - name: Extract Ubuntu RootFS
    #   run: |
    #     sudo tar -xvjf ${{ github.workspace }}/Linux_for_Tegra/tools/samplefs/sample_fs.tbz2 -C ${{ github.workspace }}/Linux_for_Tegra/rootfs

    - name: remove packages we don't wan't to install
      run: |
        cd $GITHUB_WORKSPACE/Linux_for_Tegra/nv_tegra/l4t_deb_packages
        sudo rm -f nvidia-igx-oem-config*.deb \
        nvidia-l4t-libwayland-egl1*.deb \
        nvidia-igx-systemd-reboot-hooks*.deb \
        nvidia-l4t-libwayland-server0*.deb \
        nvidia-l4t-camera*.deb \
        nvidia-l4t-dgpu-x11*.deb \
        nvidia-l4t-jetsonpower-gui-tools*.deb \
        nvidia-l4t-libwayland-client0*.deb \
        nvidia-l4t-dgpu-tools*.deb \
        nvidia-l4t-dgpu-config*.deb \
        nvidia-l4t-dgpu-apt-source*.deb \
        nvidia-l4t-graphics-demos*.deb \
        nvidia-l4t-libwayland-cursor0*.deb \
        nvidia-l4t-vulkan-sc-sdk*.deb \
        nvidia-l4t-wayland*.deb \
        nvidia-l4t-vulkan-sc-dev*.deb \
        nvidia-l4t-vulkan-sc-samples*.deb \
        nvidia-l4t-vulkan-sc*.deb \
        nvidia-l4t-pva*.deb \
        nvidia-l4t-factory-service*.deb \
        nvidia-l4t-x11*.deb \
        nvidia-l4t-3d-core*.deb \
        nvidia-l4t-oem-config*.deb \
        nvidia-l4t-openwfd*.deb \
        nvidia-l4t-gbm*.deb \
        nvidia-l4t-jetson-io*.deb \
        nvidia-l4t-weston*.deb \
        nvidia-l4t-nvsci*.deb \
        nvidia-l4t-multimedia*.deb \
        nvidia-l4t-multimedia-utils*.deb

    - name: Apply NVIDIA proprietary binaries
      run: |
        echo "Applying NVIDIA L4T binaries..."
        sudo $GITHUB_WORKSPACE/Linux_for_Tegra/apply_binaries.sh
        sudo sed -i 's|<SOC>|t234|g' $GITHUB_WORKSPACE/Linux_for_Tegra/rootfs/etc/apt/sources.list.d/nvidia-l4t-apt-source.list

        # Verify the script completed successfully
        if [ $? -eq 0 ]; then
          echo "✅ NVIDIA binaries applied successfully"
        else
          echo "❌ Failed to apply NVIDIA binaries"
          exit 1
        fi

    # - name: Add custom packages to rootfs
    #   run: |
    #     cd $GITHUB_WORKSPACE/Linux_for_Tegra

    #     if [ -f "${{ github.workspace }}/scripts/install_packages.sh" ]; then
    #       # Install additional packages in rootfs using chroot
    #       echo "Setting up chroot environment..."
    #       sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/

    #       # Mount necessary filesystems for chroot
    #       sudo mount --bind /dev rootfs/dev/
    #       sudo mount --bind /sys rootfs/sys/
    #       sudo mount --bind /proc rootfs/proc/
    #       sudo mount --bind /dev/pts rootfs/dev/pts/

    #       # Copy resolv.conf for network access in chroot
    #       sudo mv rootfs/etc/resolv.conf rootfs/etc/resolv.conf.bak
    #       sudo cp /etc/resolv.conf rootfs/etc/resolv.conf

    #       # Copy script to install packages in chroot
    #       echo "Copying install_packages.sh file from scripts..."
    #       cp ${{ github.workspace }}/scripts/install_packages.sh install_packages.sh

    #       # Make script executable and run it in chroot
    #       chmod +x install_packages.sh
    #       sudo cp install_packages.sh rootfs/tmp/
    #       sudo chroot rootfs /tmp/install_packages.sh

    #       # Clean up chroot
    #       sudo rm -f rootfs/tmp/install_packages.sh
    #       sudo rm -f rootfs/etc/resolv.conf
    #       sudo mv rootfs/etc/resolv.conf.bak rootfs/etc/resolv.conf

    #       # Unmount filesystems
    #       sudo umount rootfs/dev/pts/ || true
    #       sudo umount rootfs/proc/ || true
    #       sudo umount rootfs/sys/ || true
    #       sudo umount rootfs/dev/ || true
    #     fi
    - name: What is installing gdm3
      run: |
        sudo chroot $GITHUB_WORKSPACE/Linux_for_Tegra/rootfs aptitude why gdm3 || true

    - name: Create default user
      run: |
        echo "Creating etc/nv folder..."
        sudo mkdir -p $GITHUB_WORKSPACE/Linux_for_Tegra/rootfs/etc/nv
        echo "Remove readme from rootfs..."
        sudo rm $GITHUB_WORKSPACE/Linux_for_Tegra/rootfs/README.txt
        echo "Creating default user..."
        sudo $GITHUB_WORKSPACE/Linux_for_Tegra/tools/l4t_create_default_user.sh \
          -u ${{ env.OEM_USER }} \
          -p jetson \
          -n nexus1-basestation \
          --accept-license

    - name: Copy user creation script
      run: |
        cp $GITHUB_WORKSPACE/Linux_for_Tegra/tools/l4t_create_default_user.sh $GITHUB_WORKSPACE/l4t_create_default_user.sh

    # - name: Copy custom files to rootfs
    #   run: |
    #     cd $GITHUB_WORKSPACE/Linux_for_Tegra

    #     # Copy any custom files from repository to rootfs
    #     if [ -d "${{ github.workspace }}/rootfs-overlay" ]; then
    #       echo "Copying custom files from rootfs-overlay..."
    #       sudo cp -r ${{ github.workspace }}/rootfs-overlay/* rootfs/
    #     fi

    #     # sudo chmod +x rootfs/opt/custom/custom_startup.sh

    #     # sudo chroot rootfs systemctl enable jetson-custom-init.service

    - name: Patch jetson-disk-image-creator.sh for NVME support
      run: |
        sed -i '/"USB" | "usb")/,/\*/c\
        			"USB" | "usb")\
        				rootfs_dev="sda1"\
        				;;\
        			"NVME" | "nvme")\
        				rootfs_dev="nvme0n1p1"\
        				;;\
        			*)' $GITHUB_WORKSPACE/Linux_for_Tegra/tools/jetson-disk-image-creator.sh

        sed -i 's/Incorrect root filesystem device - Supported devices - SD, USB/\
            Incorrect root filesystem device - Supported devices - SD, USB, NVME/g' $GITHUB_WORKSPACE/Linux_for_Tegra/tools/jetson-disk-image-creator.sh

    - name: Generate ${{ env.IMAGE_TYPE }} image
      run: |
        cd $GITHUB_WORKSPACE/Linux_for_Tegra

        # Determine image name
        IMAGE_NAME="${{ env.JETSON_TYPE }}"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FULL_IMAGE_NAME="${IMAGE_NAME}_${TIMESTAMP}_${{ env.IMAGE_TYPE }}.img"

        echo "Creating ${{ env.IMAGE_TYPE }} image: $FULL_IMAGE_NAME"

        # Create the ${{ env.IMAGE_TYPE }} image
        cd tools
        sudo ./jetson-disk-image-creator.sh \
          -o "$FULL_IMAGE_NAME" \
          -b ${{ env.JETSON_TYPE }} \
          -d ${{ env.IMAGE_TYPE }}

        ls -al

        # Move image to workspace root for artifact upload
        sudo mv "$FULL_IMAGE_NAME" $GITHUB_WORKSPACE/

        ls -al

        # Create checksum
        cd $GITHUB_WORKSPACE
        sha256sum "$FULL_IMAGE_NAME" > "$FULL_IMAGE_NAME.sha256"

        # Create image info file
        cat > "$FULL_IMAGE_NAME.info" << EOF
        Jetson Custom ${{ env.IMAGE_TYPE }} Image
        =====================================

        Build Information:
        - Build Date: $(date -u)
        - L4T Version: ${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}
        - GitHub SHA: ${{ github.sha }}
        - GitHub Ref: ${{ github.ref }}
        - Workflow: ${{ github.workflow }}
        - Runner OS: ${{ runner.os }}

        Image Details:
        - Filename: $FULL_IMAGE_NAME
        - Target Device: ${{ env.JETSON_TYPE }}
        - Root Filesystem: Ubuntu 22.04 LTS (ARM64)
        - Default User: ${{ env.OEM_USER }} / jetson

        Custom Packages Included:
        # - Development tools (git, vim, htop, build-essential, cmake)
        - Docker
        - Network management tools

        Usage Instructions:
        1. Flash to ${{ env.IMAGE_TYPE }} using Raspberry Pi Imager or dd command
        2. Insert into ${{ env.JETSON_TYPE }}
        3. Power on and complete initial setup
        4. Default login: ${{ env.OEM_USER }} / jetson (change on first login)

        For support and documentation:
        https://github.com/${{ github.repository }}
        EOF

        echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

    - name: Compress image for faster upload
      run: |
        cd $GITHUB_WORKSPACE
        echo "Compressing image for upload..."

        # Compress with pigz
        pigz -c "${IMAGE_NAME}" | \
            split -b 400M -d - "${IMAGE_NAME}.gz."

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jetson-orin-nano-image-${{ github.run_number }}
        path: |
          ${{ env.IMAGE_NAME }}.gz.00
          ${{ env.IMAGE_NAME }}.gz.01
          ${{ env.IMAGE_NAME }}.gz.02
          ${{ env.IMAGE_NAME }}.gz.03
          ${{ env.IMAGE_NAME }}.gz.04
          ${{ env.IMAGE_NAME }}.gz.05
          ${{ env.IMAGE_NAME }}.gz.06
          ${{ env.IMAGE_NAME }}.gz.07
          ${{ env.IMAGE_NAME }}.gz.08
          ${{ env.IMAGE_NAME }}.gz.09
          ${{ env.IMAGE_NAME }}.gz.10
          ${{ env.IMAGE_NAME }}.sha256
          ${{ env.IMAGE_NAME }}.info
          l4t_create_default_user.sh
        retention-days: 30

    - name: Upload Image as Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.IMAGE_NAME }}.sha256
          ${{ env.IMAGE_NAME }}.info
          l4t_create_default_user.sh
        body: |
          ## Jetson ${{ env.IMAGE_TYPE }} Image

          This release contains a custom ${{ env.IMAGE_TYPE }} image for the NVIDIA ${{ env.JETSON_TYPE }}.

          ### What's Included
          - L4T Version: ${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}
          - Ubuntu 22.04 LTS ARM64
          - Custom development packages
          - Docker pre-installed
          - Default user: ${{ env.OEM_USER }}/jetson

          ### Installation
          1. Download the `.img.gz` file
          2. Extract using: `xz -d filename.img.gz`
          3. Flash to ${{ env.IMAGE_TYPE }} using Raspberry Pi Imager or dd
          4. insert memory into your Jetson
          5. Boot your ${{ env.JETSON_TYPE }}

          ### Files
          - `*.img.gz` - Compressed ${{ env.IMAGE_TYPE }} image
          - `*.sha256` - Checksum for verification
          - `*.info` - Build and usage information

        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload All Split Files as Release Assets
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: ${{ github.ref_name }}
        REPO: ${{ github.repository }}
      run: |
        for i in $(seq -w 00 99); do
          FILE="${{ env.IMAGE_NAME }}.gz.${i}"
          if [ -f "$FILE" ]; then
            echo "Uploading $FILE..."
            gh release upload "$TAG_NAME" "$FILE" --repo "$REPO" --clobber
          else
            echo "Skipping missing file: $FILE"
          fi
        done

    # - name: Cleanup workspace
    #   if: always()
    #   run: |
    #     cd /
    #     sudo rm -rf $GITHUB_WORKSPACE || true

  publish-release:
    needs: [create-draft, build-jetson-image]
    runs-on: ubuntu-latest
    steps:
      - name: Publish draft as release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-draft.outputs.release_id }}
