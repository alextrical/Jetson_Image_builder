name: Build Jetson Orin Nano SD Card Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      l4t_major_version:
        description: 'L4T Version (default: 36)'
        required: false
        default: '36'
      l4t_minor_version:
        description: 'L4T Version (default: 4.4)'
        required: false
        default: '4.4'
      image_type:
        description: 'Output image drive type (SD/USB/NVME)'
        required: false
        default: 'NVME'
      jetson_type:
        description: 'Jetson board type'
        required: false
        default: 'jetson-orin-nano-devkit-super'

env:
  L4T_MAJOR_VERSION: "${{ github.event.env.L4T_MAJOR_VERSION || '36' }}"
  L4T_MINOR_VERSION: "${{ github.event.env.L4T_MINOR_VERSION || '4.4' }}"
  IMAGE_TYPE: "${{ github.event.inputs.image_type || 'NVME' }}"
  JETSON_TYPE: "${{ github.event.inputs.jetson_type || 'jetson-orin-nano-devkit-super' }}"
  DOWNLOADS: downloads

jobs:
  # cache-jetson-downloads:
  #   # runs-on: self-hosted
  #   runs-on: ubuntu-22.04

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Set up workspace
  #     run: mkdir -p ${{ env.DOWNLOADS }}

  #   - name: Cache L4T BSP and Sample Root FS
  #     id: cache-bsp
  #     uses: actions/cache@v4
  #     with:
  #       path: ${{ github.workspace }}/Linux_for_Tegra.tar.zst
  #       key: bsp-${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}-extracted
  #       lookup-only: true

  #   - name: Download and extract L4T Driver Package & Sample Root filesystem
  #     if: steps.cache-bsp.outputs.cache-hit != 'true'
  #     run: |
  #       cd ${{ env.DOWNLOADS }}
  #       echo "Downloading L4T Driver Package (BSP)..."
  #       wget -q -O Jetson_Linux_aarch64.tbz2 https://developer.nvidia.com/downloads/embedded/l4t/r${{ env.L4T_MAJOR_VERSION }}_release_v${{ env.L4T_MINOR_VERSION }}/release/Jetson_Linux_r${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}_aarch64.tbz2
  #       echo "Downloading L4T Sample Root Filesystem..."
  #       wget -q -O Tegra_Linux_Sample-Root-Filesystem_aarch64.tbz2 https://developer.nvidia.com/downloads/embedded/l4t/r${{ env.L4T_MAJOR_VERSION }}_release_v${{ env.L4T_MINOR_VERSION }}/release/Tegra_Linux_Sample-Root-Filesystem_r${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}_aarch64.tbz2
  #       echo "Extracting L4T Driver Package (BSP)..."
  #       tar -xjf Jetson_Linux_aarch64.tbz2 -C $GITHUB_WORKSPACE/
  #       echo "Extracting L4T Sample Root Filesystem..."
  #       sudo tar -xjf Tegra_Linux_Sample-Root-Filesystem_aarch64.tbz2 -C $GITHUB_WORKSPACE/Linux_for_Tegra/rootfs/
  #       echo "Compress L4T..."
  #       sudo tar --create --preserve-permissions --use-compress-program=zstd -f $GITHUB_WORKSPACE/Linux_for_Tegra.tar.zst -C $GITHUB_WORKSPACE Linux_for_Tegra

  #   - name: List all files in $GITHUB_WORKSPACE
  #     run: ls -lah "$GITHUB_WORKSPACE"

  build-jetson-image:
    # runs-on: self-hosted
    runs-on: ubuntu-22.04
    # needs: cache-jetson-downloads

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # # - name: Set up workspace
    # #   run: |
    # #     cd $GITHUB_WORKSPACE
    # #     mkdir -p ${{ env.DOWNLOADS }}

    # - name: Install dependencies
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y \
    #       lbzip2 \
    #       libncurses5-dev \
    #       libncursesw5-dev \
    #       libxml2-utils \
    #       qemu-user-static \
    #       xmlstarlet


    #       # binfmt-support \
    #       # pigz \

    - name: Disable man-db to make package install and removal faster
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
        sudo dpkg-reconfigure man-db

    - name: Free Disk Space
      # uses: jlumbroso/free-disk-space@main
      uses: jayllyz/free-disk-space@perf/use-rmz
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true

    - name: Check disk space
      run: |
        sudo du -sh /usr/* 2>/dev/null
        sudo du -sh /var/* 2>/dev/null
        sudo du -sh /var/lib/docker/overlay2

  #   - name: Set up QEMU for ARM64 emulation
  #     run: |
  #       sudo update-binfmts --enable qemu-aarch64
  #       docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #   - name: Restore Cache L4T BSP and Sample Root FS
  #     id: cache-bsp
  #     uses: actions/cache@v4
  #     with:
  #       path: ${{ github.workspace }}/Linux_for_Tegra.tar.zst
  #       key: bsp-${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}-extracted
  #       fail-on-cache-miss: true

  #   - name: List all files in $GITHUB_WORKSPACE
  #     run: ls -lah "$GITHUB_WORKSPACE"

  #   - name: Extract L4T packages
  #     run: |
  #       cd $GITHUB_WORKSPACE

  #       echo "Extracting L4T Driver Package..."
  #       sudo tar --extract --same-permissions --use-compress-program=zstd -f ${{ github.workspace }}/Linux_for_Tegra.tar.zst
  # #       tar -xf ${{ env.DOWNLOADS }}/Jetson_Linux_aarch64.tbz2

  # #       echo "Extracting Sample Root Filesystem..."
  # #       cd Linux_for_Tegra/rootfs/
  # #       sudo tar -xpf $GITHUB_WORKSPACE/${{ env.DOWNLOADS }}/Tegra_Linux_Sample-Root-Filesystem_aarch64.tbz2

  #   - name: Apply NVIDIA proprietary binaries
  #     run: |
  #       echo "Applying NVIDIA L4T binaries..."
  #       sudo $GITHUB_WORKSPACE/Linux_for_Tegra/apply_binaries.sh

  #       # Verify the script completed successfully
  #       if [ $? -eq 0 ]; then
  #         echo "✅ NVIDIA binaries applied successfully"
  #       else
  #         echo "❌ Failed to apply NVIDIA binaries"
  #         exit 1
  #       fi

  #   - name: Add custom packages to rootfs
  #     run: |
  #       cd $GITHUB_WORKSPACE/Linux_for_Tegra

  #       if [ -f "${{ github.workspace }}/scripts/install_packages.sh" ]; then
  #         # Install additional packages in rootfs using chroot
  #         echo "Setting up chroot environment..."
  #         sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/

  #         # Mount necessary filesystems for chroot
  #         sudo mount --bind /dev rootfs/dev/
  #         sudo mount --bind /sys rootfs/sys/
  #         sudo mount --bind /proc rootfs/proc/
  #         sudo mount --bind /dev/pts rootfs/dev/pts/

  #         # Copy resolv.conf for network access in chroot
  #         sudo cp /etc/resolv.conf rootfs/etc/resolv.conf.bak
  #         sudo cp /etc/resolv.conf rootfs/etc/resolv.conf

  #         # Copy script to install packages in chroot
  #         echo "Copying install_packages.sh file from scripts..."
  #         cp ${{ github.workspace }}/scripts/install_packages.sh install_packages.sh

  #         # Make script executable and run it in chroot
  #         chmod +x install_packages.sh
  #         sudo cp install_packages.sh rootfs/tmp/
  #         sudo chroot rootfs /tmp/install_packages.sh

  #         # Clean up chroot
  #         sudo rm rootfs/tmp/install_packages.sh
  #         sudo rm rootfs/etc/resolv.conf
  #         sudo mv rootfs/etc/resolv.conf.bak rootfs/etc/resolv.conf

  #         # Unmount filesystems
  #         sudo umount rootfs/dev/pts/ || true
  #         sudo umount rootfs/dev/ || true
  #         sudo umount rootfs/sys/ || true
  #         sudo umount rootfs/proc/ || true
  #       fi

  #   - name: Copy custom files to rootfs
  #     run: |
  #       cd $GITHUB_WORKSPACE/Linux_for_Tegra

  #       # Copy any custom files from repository to rootfs
  #       if [ -d "${{ github.workspace }}/rootfs-overlay" ]; then
  #         echo "Copying custom files from rootfs-overlay..."
  #         sudo cp -r ${{ github.workspace }}/rootfs-overlay/* rootfs/
  #       fi

  #       # # Create custom startup script
  #       # sudo mkdir -p rootfs/opt/custom
  #       # cat > custom_startup.sh << 'EOF'
  #       # #!/bin/bash
  #       # # Custom startup script for Jetson Orin Nano
  #       # echo "Starting custom Jetson Orin Nano initialization..."

  #       # # Enable SSH
  #       # systemctl enable ssh
  #       # systemctl start ssh

  #       # # Set up Docker
  #       # usermod -aG docker $USER

  #       # # Custom hardware initialization
  #       # # Add your custom hardware setup here

  #       # echo "Custom initialization completed!"
  #       # EOF

  #       # sudo cp custom_startup.sh rootfs/opt/custom/
  #       # sudo chmod +x rootfs/opt/custom/custom_startup.sh

  #       # # Add to systemd for automatic execution
  #       # cat > jetson-custom-init.service << 'EOF'
  #       # [Unit]
  #       # Description=Jetson Custom Initialization
  #       # After=multi-user.target

  #       # [Service]
  #       # Type=oneshot
  #       # ExecStart=/opt/custom/custom_startup.sh
  #       # RemainAfterExit=yes

  #       # [Install]
  #       # WantedBy=multi-user.target
  #       # EOF

  #       # sudo cp jetson-custom-init.service rootfs/etc/systemd/system/
  #       # sudo chroot rootfs systemctl enable jetson-custom-init.service

  #   - name: Create default user
  #     run: |
  #       echo "Creating default user..."
  #       sudo $GITHUB_WORKSPACE/Linux_for_Tegra/tools/l4t_create_default_user.sh \
  #         -u jetson \
  #         -p jetson \
  #         -a \
  #         -n ${{ env.JETSON_TYPE }} \
  #         --accept-license

  #   - name: Patch jetson-disk-image-creator.sh for NVME support
  #     run: |
  #       sed -i '/"USB" | "usb")/,/\*/c\
  #       			"USB" | "usb")\
  #       				rootfs_dev="sda1"\
  #       				;;\
  #       			"NVME" | "nvme")\
  #       				rootfs_dev="nvme0n1p1"\
  #       				;;\
  #       			*)' $GITHUB_WORKSPACE/Linux_for_Tegra/tools/jetson-disk-image-creator.sh

  #       sed -i 's/Incorrect root filesystem device - Supported devices - SD, USB/\
  #           Incorrect root filesystem device - Supported devices - SD, USB, NVME/g' $GITHUB_WORKSPACE/Linux_for_Tegra/tools/jetson-disk-image-creator.sh

  #   - name: Generate ${{ env.IMAGE_TYPE }} image
  #     run: |
  #       cd $GITHUB_WORKSPACE/Linux_for_Tegra

  #       # Determine image name
  #       IMAGE_NAME="${{ env.JETSON_TYPE }}"
  #       TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
  #       FULL_IMAGE_NAME="${IMAGE_NAME}_${TIMESTAMP}_${{ env.IMAGE_TYPE }}.img"

  #       echo "Creating ${{ env.IMAGE_TYPE }} image: $FULL_IMAGE_NAME"

  #       # Create the ${{ env.IMAGE_TYPE }} image
  #       cd tools
  #       sudo ./jetson-disk-image-creator.sh \
  #         -o "$FULL_IMAGE_NAME" \
  #         -b ${{ env.JETSON_TYPE }} \
  #         -d ${{ env.IMAGE_TYPE }}

  #       ls -al

  #       # Move image to workspace root for artifact upload
  #       sudo mv "$FULL_IMAGE_NAME" $GITHUB_WORKSPACE/

  #       ls -al

  #       # Create checksum
  #       cd $GITHUB_WORKSPACE
  #       sha256sum "$FULL_IMAGE_NAME" > "$FULL_IMAGE_NAME.sha256"

  #       # Create image info file
  #       cat > "$FULL_IMAGE_NAME.info" << EOF
  #       Jetson Custom ${{ env.IMAGE_TYPE }} Image
  #       =====================================

  #       Build Information:
  #       - Build Date: $(date -u)
  #       - L4T Version: ${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}
  #       - GitHub SHA: ${{ github.sha }}
  #       - GitHub Ref: ${{ github.ref }}
  #       - Workflow: ${{ github.workflow }}
  #       - Runner OS: ${{ runner.os }}

  #       Image Details:
  #       - Filename: $FULL_IMAGE_NAME
  #       - Target Device: ${{ env.JETSON_TYPE }}
  #       - Root Filesystem: Ubuntu 22.04 LTS (ARM64)
  #       - Default User: jetson / jetson

  #       # Custom Packages Included:
  #       # - Development tools (git, vim, htop, build-essential, cmake)
  #       # - Python 3 with common packages (numpy, opencv-python, flask)
  #       # - Node.js and npm
  #       # - Docker
  #       # - CAN utilities and I2C tools
  #       # - Network management tools

  #       Usage Instructions:
  #       1. Flash to ${{ env.IMAGE_TYPE }} using Raspberry Pi Imager or dd command
  #       2. Insert into ${{ env.JETSON_TYPE }}
  #       3. Power on and complete initial setup
  #       4. Default login: jetson / jetson (change on first login)

  #       For support and documentation:
  #       https://github.com/${{ github.repository }}
  #       EOF

  #       echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

  #   - name: Compress image for faster upload
  #     run: |
  #       cd $GITHUB_WORKSPACE
  #       echo "Compressing image for upload..."
  #       pigz "${IMAGE_NAME}"
  #       ls -lht "${IMAGE_NAME}.gz"

  #   # - name: output to folder on Self Hosted runner
  #   #   run: |
  #   #     cd $GITHUB_WORKSPACE
  #   #     cp "${IMAGE_NAME}" /output

  #   - name: Upload build artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: jetson-orin-nano-image-${{ github.run_number }}
  #       path: |
  #         ${{ env.IMAGE_NAME }}.gz
  #         ${{ env.IMAGE_NAME }}.sha256
  #         ${{ env.IMAGE_NAME }}.info
  #       retention-days: 30

  #   - name: Create release on tag
  #     if: startsWith(github.ref, 'refs/tags/')
  #     uses: softprops/action-gh-release@v1
  #     with:
  #       files: |
  #         ${{ env.IMAGE_NAME }}.gz
  #         ${{ env.IMAGE_NAME }}.sha256
  #         ${{ env.IMAGE_NAME }}.info
  #       body: |
  #         ## Jetson ${{ env.IMAGE_TYPE }} Image

  #         This release contains a custom ${{ env.IMAGE_TYPE }} image for the NVIDIA ${{ env.JETSON_TYPE }}.

  #         ### What's Included
  #         - L4T Version: ${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}
  #         - Ubuntu 22.04 LTS ARM64
  #         - Custom development packages
  #         - Docker pre-installed
  #         - Default user: jetson/jetson

  #         ### Installation
  #         1. Download the `.img.gz` file
  #         2. Extract using: `xz -d filename.img.gz`
  #         3. Flash to ${{ env.IMAGE_TYPE }} using balenaEtcher or dd
  #         4. insert memory into your Jetson
  #         5. Boot your ${{ env.JETSON_TYPE }}

  #         ### Files
  #         - `*.img.gz` - Compressed ${{ env.IMAGE_TYPE }} image
  #         - `*.sha256` - Checksum for verification
  #         - `*.info` - Build and usage information

  #       draft: false
  #       prerelease: false
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #   # - name: Cleanup workspace
  #   #   if: always()
  #   #   run: |
  #   #     cd /
  #   #     sudo rm -rf $GITHUB_WORKSPACE || true