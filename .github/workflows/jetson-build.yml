name: Build Jetson Orin Nano SD Card Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      l4t_major_version:
        description: 'L4T Version (default: 36)'
        required: false
        default: '36'
      l4t_minor_version:
        description: 'L4T Version (default: 4.4)'
        required: false
        default: '4.4'
      image_name:
        description: 'Output image name'
        required: false
        default: 'jetson-orin-nano-custom'
      image_type:
        description: 'Output image drive type (SD/USB/NVME)'
        required: false
        default: 'NVME'
      jetson_board:
        description: 'Jetson board type'
        required: false
        default: 'jetson-orin-nano-devkit-super'

env:
  WORKSPACE: /workspace
  DOWNLOADS: /downloads

jobs:
  build-jetson-image:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up workspace
      run: |
        sudo mkdir -p ${{ env.WORKSPACE }}
        sudo chown $USER:$USER ${{ env.WORKSPACE }}
        sudo mkdir -p ${{ env.DOWNLOADS }}
        sudo chown $USER:$USER ${{ env.DOWNLOADS }}
        cd ${{ env.WORKSPACE }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          binfmt-support \
          qemu-user-static \
          pigz \
          libxml2-utils \
          xmlstarlet

      # wget \
      # curl \
      # tar \
      # bzip2 \
      # lbzip2 \
      # python3 \
      # python3-pip \
      # debootstrap \
      # parted \
      # kpartx \
      # gdisk \
      # dosfstools \
      # e2fsprogs \
      # sudo \
      # rsync \
      # bc \
      # build-essential \
      # device-tree-compiler \

    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true

    - name: Set up QEMU for ARM64 emulation
      run: |
        sudo update-binfmts --enable qemu-aarch64
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Cache L4T BSP
      id: cache-bsp
      uses: actions/cache@v4
      with:
        path: ${{ env.DOWNLOADS }}/Jetson_Linux_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2
        key: bsp-${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}

    - name: Download L4T Driver Package (BSP)
      if: steps.cache-bsp.outputs.cache-hit != 'true'
      run: |
        cd ${{ env.DOWNLOADS }}
        echo "Downloading L4T Driver Package..."
        wget -q -O Jetson_Linux_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2 https://developer.nvidia.com/downloads/embedded/l4t/r${{ inputs.l4t_major_version }}_release_v${{ inputs.l4t_minor_version }}/release/Jetson_Linux_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2

    - name: Cache Sample RootFS
      id: cache-rootfs
      uses: actions/cache@v4
      with:
        path: ${{ env.DOWNLOADS }}/Tegra_Linux_Sample-Root-Filesystem_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2
        key: rootfs-${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}

    - name: Download Sample Root Filesystem
      if: steps.cache-rootfs.outputs.cache-hit != 'true'
      run: |
        cd ${{ env.DOWNLOADS }}
        echo "Downloading Sample Root Filesystem..."
        wget -q -O Tegra_Linux_Sample-Root-Filesystem_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2 https://developer.nvidia.com/downloads/embedded/l4t/r${{ inputs.l4t_major_version }}_release_v${{ inputs.l4t_minor_version }}/release/Tegra_Linux_Sample-Root-Filesystem_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2

    - name: Extract L4T packages
      run: |
        cd ${{ env.WORKSPACE }}

        echo "Extracting L4T Driver Package..."
        tar -xf ${{ env.DOWNLOADS }}/Jetson_Linux_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2

        echo "Extracting Sample Root Filesystem..."
        cd Linux_for_Tegra/rootfs/
        sudo tar -xpf ${{ env.DOWNLOADS }}/Tegra_Linux_Sample-Root-Filesystem_r${{ inputs.l4t_major_version }}.${{ inputs.l4t_minor_version }}_aarch64.tbz2

    - name: Add custom packages to rootfs
      run: |
        cd ${{ env.WORKSPACE }}/Linux_for_Tegra

        ls ${{ github.workspace }}
        ls ${{ github.workspace }}/scripts

        if [ -d "${{ github.workspace }}/scripts/install_packages.sh" ]; then
          # Install additional packages in rootfs using chroot
          echo "Setting up chroot environment..."
          sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/

          # Mount necessary filesystems for chroot
          sudo mount --bind /dev rootfs/dev/
          sudo mount --bind /sys rootfs/sys/
          sudo mount --bind /proc rootfs/proc/
          sudo mount --bind /dev/pts rootfs/dev/pts/

          # Copy resolv.conf for network access in chroot
          sudo cp /etc/resolv.conf rootfs/etc/resolv.conf.bak
          sudo cp /etc/resolv.conf rootfs/etc/resolv.conf

          # Copy script to install packages in chroot
          echo "Copying install_packages.sh file from scripts..."
          sudo cp ${{ github.workspace }}/scripts/install_packages.sh install_packages.sh

          # Make script executable and run it in chroot
          chmod +x install_packages.sh
          sudo cp install_packages.sh rootfs/tmp/
          sudo chroot rootfs /tmp/install_packages.sh

          # Clean up chroot
          sudo rm rootfs/tmp/install_packages.sh
          sudo rm rootfs/etc/resolv.conf
          sudo mv rootfs/etc/resolv.conf.bak rootfs/etc/resolv.conf

          # Unmount filesystems
          sudo umount rootfs/dev/pts/ || true
          sudo umount rootfs/dev/ || true
          sudo umount rootfs/sys/ || true
          sudo umount rootfs/proc/ || true
        fi

    # - name: Copy custom files to rootfs
    #   run: |
    #     cd ${{ env.WORKSPACE }}/Linux_for_Tegra

    #     # Copy any custom files from repository to rootfs
    #     if [ -d "${{ github.workspace }}/rootfs-overlay" ]; then
    #       echo "Copying custom files from rootfs-overlay..."
    #       sudo cp -r ${{ github.workspace }}/rootfs-overlay/* rootfs/
    #     fi

    #     # Create custom startup script
    #     sudo mkdir -p rootfs/opt/custom
    #     cat > custom_startup.sh << 'EOF'
    #     #!/bin/bash
    #     # Custom startup script for Jetson Orin Nano
    #     echo "Starting custom Jetson Orin Nano initialization..."

    #     # Enable SSH
    #     systemctl enable ssh
    #     systemctl start ssh

    #     # Set up Docker
    #     usermod -aG docker $USER

    #     # Custom hardware initialization
    #     # Add your custom hardware setup here

    #     echo "Custom initialization completed!"
    #     EOF

    #     sudo cp custom_startup.sh rootfs/opt/custom/
    #     sudo chmod +x rootfs/opt/custom/custom_startup.sh

    #     # Add to systemd for automatic execution
    #     cat > jetson-custom-init.service << 'EOF'
    #     [Unit]
    #     Description=Jetson Custom Initialization
    #     After=multi-user.target

    #     [Service]
    #     Type=oneshot
    #     ExecStart=/opt/custom/custom_startup.sh
    #     RemainAfterExit=yes

    #     [Install]
    #     WantedBy=multi-user.target
    #     EOF

    #     sudo cp jetson-custom-init.service rootfs/etc/systemd/system/
    #     sudo chroot rootfs systemctl enable jetson-custom-init.service

    # - name: Apply NVIDIA proprietary binaries
    #   run: |
    #     cd ${{ env.WORKSPACE }}/Linux_for_Tegra

    #     echo "Applying NVIDIA L4T binaries..."
    #     sudo ./apply_binaries.sh

    #     # Verify the script completed successfully
    #     if [ $? -eq 0 ]; then
    #       echo "✅ NVIDIA binaries applied successfully"
    #     else
    #       echo "❌ Failed to apply NVIDIA binaries"
    #       exit 1
    #     fi

    - name: Create default user
      run: |
        cd ${{ env.WORKSPACE }}/Linux_for_Tegra

        echo "Creating default user..."
        sudo ./tools/l4t_create_default_user.sh \
          -u jetson \
          -p jetson \
          -a \
          -n jetson-orin-nano \
          --accept-license

    - name: Patch jetson-disk-image-creator.sh for NVME support
      run: |
        sed -i '/"USB" | "usb")/,/\*/c\
            "USB" | "usb")\
              rootfs_dev="sda1"\
              ;;\
            "NVME" | "nvme")\
              rootfs_dev="nvme0n1p1"\
              ;;\
            *)' jetson-disk-image-creator.sh

        sed -i 's/Incorrect root filesystem device - Supported devices - SD, USB/\
            Incorrect root filesystem device - Supported devices - SD, USB, NVME/g' jetson-disk-image-creator.sh

    - name: Generate disk image
      run: |
        cd ${{ env.WORKSPACE }}/Linux_for_Tegra

        # Determine image name
        IMAGE_NAME="${{ github.event.inputs.image_name || 'jetson-orin-nano-custom' }}"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FULL_IMAGE_NAME="${IMAGE_NAME}_${TIMESTAMP}_${{ github.event.inputs.image_type }}.img"

        echo "Creating SD card image: $FULL_IMAGE_NAME"

        # Create the SD card image
        cd tools
        sudo ./jetson-disk-image-creator.sh \
          -o "$FULL_IMAGE_NAME" \
          -b jetson-orin-nano-devkit-super \
          -d ${{ github.event.inputs.image_type }}

        # Move image to workspace root for artifact upload
        sudo mv "$FULL_IMAGE_NAME" ${{ env.WORKSPACE }}/

        # Create checksum
        cd ${{ env.WORKSPACE }}
        sha256sum "$FULL_IMAGE_NAME" > "$FULL_IMAGE_NAME.sha256"

        # Create image info file
        cat > "$FULL_IMAGE_NAME.info" << EOF
        Jetson Orin Nano Custom SD Card Image
        =====================================

        Build Information:
        - Build Date: $(date -u)
        - L4T Version: ${{ env.L4T_VERSION }}
        - GitHub SHA: ${{ github.sha }}
        - GitHub Ref: ${{ github.ref }}
        - Workflow: ${{ github.workflow }}
        - Runner OS: ${{ runner.os }}

        Image Details:
        - Filename: $FULL_IMAGE_NAME
        - Target Device: Jetson Orin Nano Developer Kit
        - Root Filesystem: Ubuntu 22.04 LTS (ARM64)
        - Default User: jetson / jetson

        # Custom Packages Included:
        # - Development tools (git, vim, htop, build-essential, cmake)
        # - Python 3 with common packages (numpy, opencv-python, flask)
        # - Node.js and npm
        # - Docker
        # - CAN utilities and I2C tools
        # - Network management tools

        Usage Instructions:
        1. Flash to Disk using balenaEtcher or dd command
        2. Insert into Jetson Orin Nano Developer Kit
        3. Power on and complete initial setup
        4. Default login: jetson / jetson (change on first login)

        For support and documentation:
        https://github.com/${{ github.repository }}
        EOF

        echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

    - name: Compress image for faster upload
      run: |
        cd ${{ env.WORKSPACE }}
        echo "Compressing image for upload..."
        pigz "${IMAGE_NAME}"
        ls -lht "${IMAGE_NAME}.gz"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jetson-orin-nano-image-${{ github.run_number }}
        path: |
          ${{ env.WORKSPACE }}/${{ env.IMAGE_NAME }}.gz
          ${{ env.WORKSPACE }}/${{ env.IMAGE_NAME }}.sha256
          ${{ env.WORKSPACE }}/${{ env.IMAGE_NAME }}.info
        retention-days: 30

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.WORKSPACE }}/${{ env.IMAGE_NAME }}.gz
          ${{ env.WORKSPACE }}/${{ env.IMAGE_NAME }}.sha256
          ${{ env.WORKSPACE }}/${{ env.IMAGE_NAME }}.info
        body: |
          ## Jetson Disk Image

          This release contains a custom Disk image for the NVIDIA Jetson Developer Kit.

          ### What's Included
          - L4T Version: ${{ env.L4T_VERSION }}
          - Ubuntu 22.04 LTS ARM64
          - Custom development packages
          - Docker pre-installed
          - Default user: jetson/jetson

          ### Installation
          1. Download the `.img.gz` file
          2. Extract using: `xz -d filename.img.gz`
          3. Flash to Disk using balenaEtcher or dd
          4. Boot your Jetson

          ### Files
          - `*.img.gz` - Compressed Disk image
          - `*.sha256` - Checksum for verification
          - `*.info` - Build and usage information

        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup workspace
      if: always()
      run: |
        cd /
        sudo rm -rf ${{ env.WORKSPACE }} || true